@code {
    public class ExerciseFile
    {
        public string Name { get; set; } = string.Empty;
        public string Path { get; set; } = string.Empty;
    }
    [Parameter] public int Number { get; set; }
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public string Description { get; set; } = string.Empty;
    [Parameter] public string Status { get; set; } = "notStarted";
    [Parameter] public string Solution { get; set; } = string.Empty;
    [Parameter] public List<string> Tags { get; set; } = new();
    [Parameter] public EventCallback OnToggle { get; set; }
    [Parameter] public EventCallback<string> OnSolutionChange { get; set; }
    [Parameter] public ExerciseFile? File { get; set; }

    protected override void OnInitialized()
    {
        File = new ExerciseFile { Name = "Aufgabe.pdf", Path = "https://example.com/aufgabe.pdf" };
    }
}

<div class="group flex flex-col sm:flex-row items-start gap-4 p-4 sm:p-6 bg-white rounded-xl shadow-sm hover:shadow-lg transition-all duration-300 cursor-pointer transform hover:-translate-y-1"
    @onclick="() => OnToggle.InvokeAsync()">
    <div class="flex sm:flex-col items-center gap-1 mt-1">
        <span class="text-sm font-medium text-gray-400">#@Number</span>
        <div class="text-2xl transition-transform duration-300 group-hover:scale-110">
            @if (Status == "completed")
            {
                <span class="text-green-500">‚úî</span>
            }
            else if (Status == "inProgress")
            {
                <span class="text-purple-500">‚è≥</span>
            }
            else
            {
                <span class="text-gray-300">‚óã</span>
            }
        </div>
    </div>
    <div class="flex-1 w-full">
        <div class="flex flex-col sm:flex-row justify-between items-start gap-2 mb-2">
            <h3
                class="@($"font-semibold text-lg {(Status == "completed"? "text-emerald-600 line-through": Status == "inProgress"? "text-purple-600": "text-gray-800")}")">
                @Title</h3>
            @if (File is not null)
            {
                <button @onclick="HandleDownload"
                    class="w-full sm:w-auto flex items-center justify-center gap-2 px-3 py-1 text-sm font-medium text-purple-600 bg-purple-50 hover:bg-purple-100 rounded-full">
                    <span>üì•</span> @File.Name
                </button>
            }
        </div>
        <p class="@($"text-sm leading-relaxed mb-3 {(Status == "completed" ? "text-gray-400" : "text-gray-600")}")">
            @Description</p>
        <div class="flex flex-wrap gap-2 mb-3">
            @foreach (var tag in Tags)
            {
                <span class="px-2 py-1 text-xs font-medium rounded-full bg-purple-100 text-purple-700">@tag</span>
            }
        </div>
        <input type="text" class="w-full px-3 py-1.5 text-sm border border-gray-200 rounded-md focus:ring-purple-500"
            @bind="Solution" @oninput="e => OnSolutionChange.InvokeAsync(Solution)" />
    </div>
</div>

@code {
    private void HandleDownload()
    {
        if (File is not null)
        {
            @* var js = "const link = document.createElement('a'); link.href = '" + File.Path + "'; link.download = '" + File.Name + "'; document.body.appendChild(link); link.click(); document.body.removeChild(link);";
            _ = Task.Run(() => JS.InvokeVoidAsync("eval", js)); *@
        }
    }
}
