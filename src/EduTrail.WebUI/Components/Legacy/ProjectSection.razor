@using EduTrail.Domain.Entities
@using EduTrail.WebUI.Components

<div class="mb-12 bg-white/50 backdrop-blur-sm rounded-2xl p-6 shadow-sm">
    <div class="flex flex-wrap items-center justify-between mb-6">
        <div class="flex items-center gap-3">
            <h2 class="text-2xl font-bold bg-gradient-to-r from-purple-700 to-purple-500 bg-clip-text text-transparent">
                @Title
            </h2>
        </div>
        <div class="ml-auto flex items-center gap-4">
            <div class="flex items-center gap-2">
                <div class="w-32 h-2 bg-gray-200 rounded-full overflow-hidden">
                    <div class="h-full bg-purple-500 transition-all duration-500 ease-out"
                        style="width: @(50 + "%");" />
                </div>
                <span class="text-sm font-medium text-gray-600">
                    @(50)%
                </span>
            </div>

        </div>
    </div>
    <div class="space-y-4">

        @foreach (var task in Tasks)
        {
            <ChecklistItem Number=@(taskNumber++) Title=@task.Title Description=@task.Description
                Solution=@(Solutions.TryGetValue(task.Id, out var sol) ? sol : string.Empty)
                Status=@GetTaskStatus(task.Id) />
        }
    </div>
</div>

@code {
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public List<Assignment> Tasks { get; set; } = new();
    [Parameter] public Dictionary<Guid, string> Solutions { get; set; } = new();
    [Parameter] public EventCallback<string> ToggleTask { get; set; }
    [Parameter] public EventCallback<(string, string)> UpdateSolution { get; set; }

    int taskNumber = 1;

    private string GetTaskStatus(Guid id)
    {
        // Logic to determine the status (completed, in-progress, etc.)
        return "notStarted";
    }
}
